// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Resources
{
    /// <summary> A Class representing a SubscriptionProvider along with the instance operations that can be performed on it. </summary>
    public partial class SubscriptionProvider : ArmResource
    {
        /// <summary> Generate the resource identifier of a <see cref="SubscriptionProvider"/> instance. </summary>
        public static ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceProviderNamespace)
        {
            var resourceId = $"/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}";
            return new ResourceIdentifier(resourceId);
        }
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ProvidersRestOperations _providersRestClient;
        private readonly ProviderResourceTypesRestOperations _providerResourceTypesRestClient;
        private readonly ProviderData _data;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionProvider"/> class for mocking. </summary>
        protected SubscriptionProvider()
        {
        }

        /// <summary> Initializes a new instance of the <see cref = "SubscriptionProvider"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="resource"> The resource that is the target of operations. </param>
        internal SubscriptionProvider(ArmResource options, ProviderData resource) : base(options, new ResourceIdentifier(resource.Id))
        {
            HasData = true;
            _data = resource;
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _providersRestClient = new ProvidersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
            _providerResourceTypesRestClient = new ProviderResourceTypesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionProvider"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionProvider(ArmResource options, ResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _providersRestClient = new ProvidersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
            _providerResourceTypesRestClient = new ProviderResourceTypesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionProvider"/> class. </summary>
        /// <param name="clientOptions"> The client options to build client context. </param>
        /// <param name="credential"> The credential to build client context. </param>
        /// <param name="uri"> The uri to build client context. </param>
        /// <param name="pipeline"> The pipeline to build client context. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionProvider(ArmClientOptions clientOptions, TokenCredential credential, Uri uri, HttpPipeline pipeline, ResourceIdentifier id) : base(clientOptions, credential, uri, pipeline, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _providersRestClient = new ProvidersRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
            _providerResourceTypesRestClient = new ProviderResourceTypesRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.Resources/providers";

        /// <summary> Gets the valid resource type for the operations. </summary>
        protected override ResourceType ValidResourceType => ResourceType;

        /// <summary> Gets whether or not the current instance has data. </summary>
        public virtual bool HasData { get; }

        /// <summary> Gets the data representing this Feature. </summary>
        /// <exception cref="InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
        public virtual ProviderData Data
        {
            get
            {
                if (!HasData)
                    throw new InvalidOperationException("The current instance does not have data, you must call Get first.");
                return _data;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}
        /// OperationId: Providers_Get
        /// <summary> Gets the specified resource provider. </summary>
        /// <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SubscriptionProvider>> GetAsync(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SubscriptionProvider.Get");
            scope.Start();
            try
            {
                var response = await _providersRestClient.GetAsync(Id.SubscriptionId, Id.ResourceType.Namespace, expand, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new SubscriptionProvider(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}
        /// OperationId: Providers_Get
        /// <summary> Gets the specified resource provider. </summary>
        /// <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SubscriptionProvider> Get(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SubscriptionProvider.Get");
            scope.Start();
            try
            {
                var response = _providersRestClient.Get(Id.SubscriptionId, Id.ResourceType.Namespace, expand, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SubscriptionProvider(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async virtual Task<IEnumerable<Location>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public virtual IEnumerable<Location> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            return ListAvailableLocations(ResourceType, cancellationToken);
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}
        /// OperationId: Providers_Unregister
        /// <summary> Unregisters a subscription from a resource provider. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SubscriptionProvider>> UnregisterAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SubscriptionProvider.Unregister");
            scope.Start();
            try
            {
                var response = await _providersRestClient.UnregisterAsync(Id.SubscriptionId, Id.ResourceType.Namespace, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new SubscriptionProvider(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}
        /// OperationId: Providers_Unregister
        /// <summary> Unregisters a subscription from a resource provider. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SubscriptionProvider> Unregister(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SubscriptionProvider.Unregister");
            scope.Start();
            try
            {
                var response = _providersRestClient.Unregister(Id.SubscriptionId, Id.ResourceType.Namespace, cancellationToken);
                return Response.FromValue(new SubscriptionProvider(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/providerPermissions
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}
        /// OperationId: Providers_ProviderPermissions
        /// <summary> Get the provider permissions. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<IReadOnlyList<ProviderPermission>>> ProviderPermissionsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SubscriptionProvider.ProviderPermissions");
            scope.Start();
            try
            {
                var response = await _providersRestClient.ProviderPermissionsAsync(Id.SubscriptionId, Id.ResourceType.Namespace, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/providerPermissions
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}
        /// OperationId: Providers_ProviderPermissions
        /// <summary> Get the provider permissions. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<ProviderPermission>> ProviderPermissions(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SubscriptionProvider.ProviderPermissions");
            scope.Start();
            try
            {
                var response = _providersRestClient.ProviderPermissions(Id.SubscriptionId, Id.ResourceType.Namespace, cancellationToken);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}
        /// OperationId: Providers_Register
        /// <summary> Registers a subscription with a resource provider. </summary>
        /// <param name="properties"> The third party consent for S2S. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<SubscriptionProvider>> RegisterAsync(ProviderRegistrationRequest properties = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SubscriptionProvider.Register");
            scope.Start();
            try
            {
                var response = await _providersRestClient.RegisterAsync(Id.SubscriptionId, Id.ResourceType.Namespace, properties, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new SubscriptionProvider(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}
        /// OperationId: Providers_Register
        /// <summary> Registers a subscription with a resource provider. </summary>
        /// <param name="properties"> The third party consent for S2S. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<SubscriptionProvider> Register(ProviderRegistrationRequest properties = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SubscriptionProvider.Register");
            scope.Start();
            try
            {
                var response = _providersRestClient.Register(Id.SubscriptionId, Id.ResourceType.Namespace, properties, cancellationToken);
                return Response.FromValue(new SubscriptionProvider(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/resourceTypes
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}
        /// OperationId: ProviderResourceTypes_List
        /// <summary> List the resource types for a specified resource provider. </summary>
        /// <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<IReadOnlyList<ProviderResourceType>>> GetProviderResourceTypesAsync(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SubscriptionProvider.GetProviderResourceTypes");
            scope.Start();
            try
            {
                var response = await _providerResourceTypesRestClient.ListAsync(Id.SubscriptionId, Id.ResourceType.Namespace, expand, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/resourceTypes
        /// ContextualPath: /subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}
        /// OperationId: ProviderResourceTypes_List
        /// <summary> List the resource types for a specified resource provider. </summary>
        /// <param name="expand"> The $expand query parameter. For example, to include property aliases in response, use $expand=resourceTypes/aliases. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<ProviderResourceType>> GetProviderResourceTypes(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("SubscriptionProvider.GetProviderResourceTypes");
            scope.Start();
            try
            {
                var response = _providerResourceTypesRestClient.List(Id.SubscriptionId, Id.ResourceType.Namespace, expand, cancellationToken);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        #region Feature

        /// <summary> Gets a collection of Features in the SubscriptionProvider. </summary>
        /// <returns> An object representing collection of Features and their operations over a SubscriptionProvider. </returns>
        public FeatureCollection GetFeatures()
        {
            return new FeatureCollection(this);
        }
        #endregion
    }
}
