// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.Management.Models;

namespace Azure.ResourceManager.Management
{
    /// <summary> A class representing collection of SubscriptionUnderManagementGroup and their operations over its parent. </summary>
    public partial class SubscriptionUnderManagementGroupCollection : ArmCollection, IEnumerable<SubscriptionUnderManagementGroup>, IAsyncEnumerable<SubscriptionUnderManagementGroup>

    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ManagementGroupSubscriptionsRestOperations _managementGroupSubscriptionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionUnderManagementGroupCollection"/> class for mocking. </summary>
        protected SubscriptionUnderManagementGroupCollection()
        {
        }

        /// <summary> Initializes a new instance of SubscriptionUnderManagementGroupCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal SubscriptionUnderManagementGroupCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _managementGroupSubscriptionsRestClient = new ManagementGroupSubscriptionsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ManagementGroup.ResourceType;

        // Collection level operations.

        /// RequestPath: /providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}
        /// ContextualPath: /providers/Microsoft.Management/managementGroups/{groupId}
        /// OperationId: ManagementGroupSubscriptions_Create
        /// <summary>
        /// Associates existing subscription with the management group.
        /// 
        /// </summary>
        /// <param name="subscriptionId"> Subscription ID. </param>
        /// <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with &apos;no-cache&apos; value to bypass existing caches. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        public virtual ManagementGroupSubscriptionCreateOperation CreateOrUpdate(string subscriptionId, string cacheControl = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }

            using var scope = _clientDiagnostics.CreateScope("SubscriptionUnderManagementGroupCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _managementGroupSubscriptionsRestClient.Create(Id.Name, subscriptionId, cacheControl, cancellationToken);
                var operation = new ManagementGroupSubscriptionCreateOperation(Parent, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}
        /// ContextualPath: /providers/Microsoft.Management/managementGroups/{groupId}
        /// OperationId: ManagementGroupSubscriptions_Create
        /// <summary>
        /// Associates existing subscription with the management group.
        /// 
        /// </summary>
        /// <param name="subscriptionId"> Subscription ID. </param>
        /// <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with &apos;no-cache&apos; value to bypass existing caches. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        public async virtual Task<ManagementGroupSubscriptionCreateOperation> CreateOrUpdateAsync(string subscriptionId, string cacheControl = null, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }

            using var scope = _clientDiagnostics.CreateScope("SubscriptionUnderManagementGroupCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _managementGroupSubscriptionsRestClient.CreateAsync(Id.Name, subscriptionId, cacheControl, cancellationToken).ConfigureAwait(false);
                var operation = new ManagementGroupSubscriptionCreateOperation(Parent, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}
        /// ContextualPath: /providers/Microsoft.Management/managementGroups/{groupId}
        /// OperationId: ManagementGroupSubscriptions_GetSubscription
        /// <summary>
        /// Retrieves details about given subscription which is associated with the management group.
        /// 
        /// </summary>
        /// <param name="subscriptionId"> Subscription ID. </param>
        /// <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with &apos;no-cache&apos; value to bypass existing caches. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        public virtual Response<SubscriptionUnderManagementGroup> Get(string subscriptionId, string cacheControl = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }

            using var scope = _clientDiagnostics.CreateScope("SubscriptionUnderManagementGroupCollection.Get");
            scope.Start();
            try
            {
                var response = _managementGroupSubscriptionsRestClient.GetSubscription(Id.Name, subscriptionId, cacheControl, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SubscriptionUnderManagementGroup(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}
        /// ContextualPath: /providers/Microsoft.Management/managementGroups/{groupId}
        /// OperationId: ManagementGroupSubscriptions_GetSubscription
        /// <summary>
        /// Retrieves details about given subscription which is associated with the management group.
        /// 
        /// </summary>
        /// <param name="subscriptionId"> Subscription ID. </param>
        /// <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with &apos;no-cache&apos; value to bypass existing caches. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        public async virtual Task<Response<SubscriptionUnderManagementGroup>> GetAsync(string subscriptionId, string cacheControl = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }

            using var scope = _clientDiagnostics.CreateScope("SubscriptionUnderManagementGroupCollection.Get");
            scope.Start();
            try
            {
                var response = await _managementGroupSubscriptionsRestClient.GetSubscriptionAsync(Id.Name, subscriptionId, cacheControl, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new SubscriptionUnderManagementGroup(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="subscriptionId"> Subscription ID. </param>
        /// <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with &apos;no-cache&apos; value to bypass existing caches. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        public virtual Response<SubscriptionUnderManagementGroup> GetIfExists(string subscriptionId, string cacheControl = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }

            using var scope = _clientDiagnostics.CreateScope("SubscriptionUnderManagementGroupCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _managementGroupSubscriptionsRestClient.GetSubscription(Id.Name, subscriptionId, cacheControl, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<SubscriptionUnderManagementGroup>(null, response.GetRawResponse())
                    : Response.FromValue(new SubscriptionUnderManagementGroup(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="subscriptionId"> Subscription ID. </param>
        /// <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with &apos;no-cache&apos; value to bypass existing caches. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        public async virtual Task<Response<SubscriptionUnderManagementGroup>> GetIfExistsAsync(string subscriptionId, string cacheControl = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }

            using var scope = _clientDiagnostics.CreateScope("SubscriptionUnderManagementGroupCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _managementGroupSubscriptionsRestClient.GetSubscriptionAsync(Id.Name, subscriptionId, cacheControl, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<SubscriptionUnderManagementGroup>(null, response.GetRawResponse())
                    : Response.FromValue(new SubscriptionUnderManagementGroup(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="subscriptionId"> Subscription ID. </param>
        /// <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with &apos;no-cache&apos; value to bypass existing caches. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        public virtual Response<bool> Exists(string subscriptionId, string cacheControl = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }

            using var scope = _clientDiagnostics.CreateScope("SubscriptionUnderManagementGroupCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(subscriptionId, cacheControl, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="subscriptionId"> Subscription ID. </param>
        /// <param name="cacheControl"> Indicates whether the request should utilize any caches. Populate the header with &apos;no-cache&apos; value to bypass existing caches. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string subscriptionId, string cacheControl = null, CancellationToken cancellationToken = default)
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }

            using var scope = _clientDiagnostics.CreateScope("SubscriptionUnderManagementGroupCollection.ExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(subscriptionId, cacheControl, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// RequestPath: /providers/Microsoft.Management/managementGroups/{groupId}/subscriptions
        /// ContextualPath: /providers/Microsoft.Management/managementGroups/{groupId}
        /// OperationId: ManagementGroupSubscriptions_GetSubscriptionsUnderManagementGroup
        /// <summary>
        /// Retrieves details about all subscriptions which are associated with the management group.
        /// 
        /// </summary>
        /// <param name="skiptoken">
        /// Page continuation token is only used if a previous operation returned a partial result. 
        /// If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
        /// 
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SubscriptionUnderManagementGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SubscriptionUnderManagementGroup> GetAll(string skiptoken = null, CancellationToken cancellationToken = default)
        {
            Page<SubscriptionUnderManagementGroup> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SubscriptionUnderManagementGroupCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _managementGroupSubscriptionsRestClient.GetSubscriptionsUnderManagementGroup(Id.Name, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SubscriptionUnderManagementGroup(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<SubscriptionUnderManagementGroup> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SubscriptionUnderManagementGroupCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _managementGroupSubscriptionsRestClient.GetSubscriptionsUnderManagementGroupNextPage(nextLink, Id.Name, skiptoken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new SubscriptionUnderManagementGroup(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// RequestPath: /providers/Microsoft.Management/managementGroups/{groupId}/subscriptions
        /// ContextualPath: /providers/Microsoft.Management/managementGroups/{groupId}
        /// OperationId: ManagementGroupSubscriptions_GetSubscriptionsUnderManagementGroup
        /// <summary>
        /// Retrieves details about all subscriptions which are associated with the management group.
        /// 
        /// </summary>
        /// <param name="skiptoken">
        /// Page continuation token is only used if a previous operation returned a partial result. 
        /// If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
        /// 
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SubscriptionUnderManagementGroup" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SubscriptionUnderManagementGroup> GetAllAsync(string skiptoken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<SubscriptionUnderManagementGroup>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SubscriptionUnderManagementGroupCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _managementGroupSubscriptionsRestClient.GetSubscriptionsUnderManagementGroupAsync(Id.Name, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SubscriptionUnderManagementGroup(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<SubscriptionUnderManagementGroup>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("SubscriptionUnderManagementGroupCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _managementGroupSubscriptionsRestClient.GetSubscriptionsUnderManagementGroupNextPageAsync(nextLink, Id.Name, skiptoken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new SubscriptionUnderManagementGroup(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<SubscriptionUnderManagementGroup> IEnumerable<SubscriptionUnderManagementGroup>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SubscriptionUnderManagementGroup> IAsyncEnumerable<SubscriptionUnderManagementGroup>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.ResourceManager.ResourceIdentifier, SubscriptionUnderManagementGroup, SubscriptionUnderManagementGroupData> Construct() { }
    }
}
